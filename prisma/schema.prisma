datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Course {
  id          Int       @id @default(autoincrement())
  title       String
  slug        String    @unique
  description String
  modules     Module[]
  userCourses UserCourse[]
}

model Module {
  id          Int       @id @default(autoincrement())
  name        String
  nivel       String   @default("Módulo 1")
  courseId    Int
  course      Course    @relation(fields: [courseId], references: [id])
  submodules  Submodule[]
  userCourses UserCourse[]
  userModuleProgress UserModuleProgress[]
}

model Submodule {
  id          Int       @id @default(autoincrement())
  name        String
  moduleId    Int
  module      Module    @relation(fields: [moduleId], references: [id])
  tasks       Task[]
}

model Task {
  id            Int       @id @default(autoincrement())
  title         String
  description   String
  type          String
  slug          String     @unique
  url           String?
  video_url     String?
  video_duration String?     
  locked        Boolean   @default(false)
  completed     Boolean   @default(false)
  submoduleId   Int
  submodule     Submodule @relation(fields: [submoduleId], references: [id])
  order         Int       @default(0)
  createdAt     DateTime  @default(now())
  userProgress  UserProgress[]
  userCourses   UserCourse[]
}

// Modelo para usuários
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String
  avatar        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userCourses   UserCourse[]
  userProgress  UserProgress[]
}

// Modelo para rastrear cursos do usuário
model UserCourse {
  id              String    @id @default(cuid())
  userId          String
  courseId        Int
  enrolledAt      DateTime  @default(now())
  lastAccessedAt  DateTime  @default(now())
  isCompleted     Boolean   @default(false)
  completedAt     DateTime?
  currentModuleId Int?      // Módulo atual onde o usuário está
  currentTaskId   Int?      // Task atual onde o usuário está
  progress        Float     @default(0.0) // Percentual de progresso (0-100)
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course          Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  currentModule   Module?   @relation(fields: [currentModuleId], references: [id])
  currentTask     Task?     @relation(fields: [currentTaskId], references: [id])
  
  userModuleProgress UserModuleProgress[]
  userProgress      UserProgress[]
  
  @@unique([userId, courseId])
}

// Modelo para progresso detalhado por task
model UserProgress {
  id              String    @id @default(cuid())
  userId          String
  taskId          Int
  userCourseId    String
  isCompleted     Boolean   @default(false)
  completedAt     DateTime?
  timeSpent       Int       @default(0) // Tempo gasto em segundos
  lastPosition    Int?      // Posição no vídeo (em segundos)
  attempts        Int       @default(0) // Número de tentativas
  score           Float?    // Pontuação se for um quiz/teste
  notes           String?   // Notas do usuário
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  task            Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userCourse      UserCourse @relation(fields: [userCourseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, taskId])
}

// Modelo para progresso por módulo
model UserModuleProgress {
  id              String    @id @default(cuid())
  userId          String
  moduleId        Int
  userCourseId    String
  isCompleted     Boolean   @default(false)
  completedAt     DateTime?
  progress        Float     @default(0.0) // Percentual de progresso do módulo
  tasksCompleted  Int       @default(0) // Número de tasks completadas
  totalTasks      Int       @default(0) // Total de tasks no módulo
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  userCourse      UserCourse @relation(fields: [userCourseId], references: [id], onDelete: Cascade)
  module          Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, moduleId])
}
